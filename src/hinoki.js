// Generated by CoffeeScript 1.7.1
(function() {
  var Promise, hinoki;
  hinoki = {};
  if (typeof window !== "undefined" && window !== null) {
    if (window.Promise == null) {
      throw new Error('hinoki requires Promise global by bluebird to be present');
    }
    Promise = window.Promise;
    window.hinoki = hinoki;
  } else if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
    Promise = require('bluebird');
    module.exports = hinoki;
  } else {
    throw new Error('either the `window` global or the `module.exports` global must be present');
  }
  hinoki.get = function(oneOrManyContainers, oneOrManyNamesOrPaths, debug) {
    var containers;
    containers = hinoki.coerceToArray(oneOrManyContainers);
    if (containers.length === 0) {
      throw new Error('at least 1 container is required');
    }
    if (Array.isArray(oneOrManyNamesOrPaths)) {
      return Promise.all(oneOrManyNamesOrPaths).map(function(nameOrPath) {
        return hinoki.getOne(containers, nameOrPath, debug);
      });
    } else {
      return hinoki.getOne(containers, oneOrManyNamesOrPaths, debug);
    }
  };
  hinoki.getOne = function(containers, nameOrPath, debug) {
    var dependenciesPromise, dependencyNames, dependencyPaths, error, factoryCallResultPromise, newPath, nocache, path, promiseAwaitingResolution, remainingContainers, resolution, resolutionErrors, _base, _ref;
    path = hinoki.coerceToArray(nameOrPath);
    try {
      resolution = hinoki.resolveInContainers(containers, path, debug);
    } catch (_error) {
      error = _error;
      return Promise.reject(new hinoki.errors.ErrorInResolvers(path, containers, error));
    }
    if (resolution instanceof Error) {
      return Promise.reject(new hinoki.errors.ErrorInResolvers(path, containers, resolution));
    }
    if (resolution == null) {
      return Promise.reject(new hinoki.errors.Unresolvable(path, containers));
    }
    resolutionErrors = hinoki.resolutionErrors(resolution);
    if (resolutionErrors != null) {
      return Promise.reject(new hinoki.errors.InvalidResolution(path, resolution, resolutionErrors));
    }
    if (!hinoki.isUndefined(resolution.value)) {
      if (typeof debug === "function") {
        debug({
          event: 'valueResolved',
          path: path,
          resolution: resolution
        });
      }
      return Promise.resolve(resolution.value);
    }
    if (hinoki.arrayOfStringsHasDuplicates(path)) {
      return Promise.reject(new hinoki.errors.CircularDependency(path, resolution));
    }
    if (typeof debug === "function") {
      debug({
        event: 'factoryResolved',
        path: path,
        resolution: resolution
      });
    }
    promiseAwaitingResolution = (_ref = resolution.container.promisesAwaitingResolution) != null ? _ref[resolution.name] : void 0;
    if (promiseAwaitingResolution != null) {
      if (typeof debug === "function") {
        debug({
          event: 'valueAlreadyAwaitingResolution',
          path: path,
          resolution: resolution,
          value: promiseAwaitingResolution
        });
      }
      return promiseAwaitingResolution;
    }
    remainingContainers = hinoki.startingWith(containers, resolution.container);
    dependencyNames = hinoki.getNamesToInject(resolution.factory);
    newPath = path.slice();
    newPath[0] = resolution.name;
    dependencyPaths = dependencyNames.map(function(x) {
      return hinoki.coerceToArray(x).concat(newPath);
    });
    dependenciesPromise = hinoki.get(remainingContainers, dependencyPaths, debug);
    factoryCallResultPromise = dependenciesPromise.then(function(dependencyValues) {
      return hinoki.callFactory(resolution.container, newPath, resolution.factory, dependencyValues, debug);
    });
    nocache = resolution.nocache || resolution.factory.$nocache;
    if (!nocache) {
      if ((_base = resolution.container).promisesAwaitingResolution == null) {
        _base.promisesAwaitingResolution = {};
      }
      resolution.container.promisesAwaitingResolution[resolution.name] = factoryCallResultPromise;
    }
    return factoryCallResultPromise.then(function(value) {
      var _base1;
      if (hinoki.isUndefined(value)) {
        return Promise.reject(new hinoki.errors.FactoryReturnedUndefined(newPath, resolution.container, resolution.factory));
      }
      if (!nocache) {
        if ((_base1 = resolution.container).values == null) {
          _base1.values = {};
        }
        resolution.container.values[resolution.name] = value;
        delete resolution.container.promisesAwaitingResolution[resolution.name];
      }
      return value;
    });
  };
  hinoki.callFactory = function(container, nameOrPath, factory, dependencyValues, debug) {
    var error, path, valueOrPromise;
    path = hinoki.coerceToArray(nameOrPath);
    try {
      valueOrPromise = factory.apply(null, dependencyValues);
    } catch (_error) {
      error = _error;
      return Promise.reject(new hinoki.errors.ErrorInFactory(path, container, error));
    }
    if (!hinoki.isThenable(valueOrPromise)) {
      if (typeof debug === "function") {
        debug({
          event: 'valueCreated',
          path: path,
          value: valueOrPromise,
          factory: factory,
          container: container
        });
      }
      return Promise.resolve(valueOrPromise);
    }
    if (typeof debug === "function") {
      debug({
        event: 'promiseCreated',
        path: path,
        promise: valueOrPromise,
        container: container,
        factory: factory
      });
    }
    return Promise.resolve(valueOrPromise).then(function(value) {
      if (typeof debug === "function") {
        debug({
          event: 'promiseResolved',
          path: path,
          value: value,
          container: container,
          factory: factory
        });
      }
      return value;
    })["catch"](function(rejection) {
      return Promise.reject(new hinoki.errors.PromiseRejected(path, container, rejection));
    });
  };
  hinoki.resolveInContainer = function(container, nameOrPath, debug) {
    var accum, defaultResolver, path, resolution, resolve, resolvers;
    path = hinoki.coerceToArray(nameOrPath);
    defaultResolver = function(name) {
      var resolution;
      resolution = hinoki.defaultResolver(name, container);
      if (typeof debug === "function") {
        debug({
          event: 'defaultResolverCalled',
          name: name,
          container: container,
          resolution: resolution
        });
      }
      return resolution;
    };
    resolvers = hinoki.coerceToArray(container.resolvers || []);
    accum = function(inner, resolver) {
      return function(name) {
        var resolution;
        resolution = resolver(name, container, inner, debug);
        if (typeof debug === "function") {
          debug({
            event: 'resolverCalled',
            resolver: resolver,
            name: name,
            container: container,
            resolution: resolution
          });
        }
        return resolution;
      };
    };
    resolve = resolvers.reduceRight(accum, defaultResolver);
    resolution = resolve(path[0]);
    if ((resolution != null) && 'object' === typeof resolution) {
      resolution.container = container;
    }
    return resolution;
  };
  hinoki.resolveInContainers = function(containers, nameOrPath, debug) {
    var path;
    path = hinoki.coerceToArray(nameOrPath);
    return hinoki.some(containers, function(container) {
      return hinoki.resolveInContainer(container, path, debug);
    });
  };
  hinoki.resolutionErrors = function(resolution) {
    var errors, isFactory, isValue;
    errors = [];
    if ('object' !== typeof resolution) {
      errors.push('must be an object');
    }
    if (!(((resolution != null ? resolution.name : void 0) != null) && 'string' === typeof (resolution != null ? resolution.name : void 0))) {
      errors.push("must have the 'name' property which is a string");
    }
    isValue = !hinoki.isUndefined(resolution != null ? resolution.value : void 0);
    isFactory = (resolution != null ? resolution.factory : void 0) != null;
    if (!(isValue || isFactory)) {
      errors.push("must have either the 'value' or the 'factory' property");
    } else if (isValue && isFactory) {
      errors.push("must have either the 'value' or the 'factory' property - not both");
    } else if (isFactory && 'function' !== typeof resolution.factory) {
      errors.push("the 'factory' property must be a function");
    }
    if (errors.length === 0) {
      return null;
    } else {
      return errors;
    }
  };
  hinoki.defaultResolver = function(name, container) {
    var factory, value, _ref, _ref1;
    value = (_ref = container.values) != null ? _ref[name] : void 0;
    if (!hinoki.isUndefined(value)) {
      return {
        value: value,
        name: name
      };
    }
    factory = (_ref1 = container.factories) != null ? _ref1[name] : void 0;
    if (factory == null) {
      return;
    }
    if ((factory.$inject == null) && 'function' === typeof factory) {
      factory.$inject = hinoki.parseFunctionArguments(factory);
    }
    return {
      factory: factory,
      name: name
    };
  };
  hinoki.errors = {};
  hinoki.errors.ErrorInResolvers = function(path, containers, error) {
    this.message = "error in resolvers for '" + path[0] + "' (" + (hinoki.pathToString(path)) + "). original error message: " + error.message;
    this.type = 'ErrorInResolver';
    this.path = path;
    this.containers = containers;
    this.error = error;
    if (Error.captureStackTrace) {
      return Error.captureStackTrace(this, this.constructor);
    }
  };
  hinoki.errors.ErrorInResolvers.prototype = new Error;
  hinoki.errors.Unresolvable = function(path, container) {
    this.message = "unresolvable name '" + path[0] + "' (" + (hinoki.pathToString(path)) + ")";
    this.type = 'Unresolvable';
    this.path = path;
    this.container = container;
    if (Error.captureStackTrace) {
      return Error.captureStackTrace(this, this.constructor);
    }
  };
  hinoki.errors.Unresolvable.prototype = new Error;
  hinoki.errors.InvalidResolution = function(path, resolution, errors) {
    var lines;
    lines = errors;
    lines.unshift("errors in resolution returned by resolvers for '" + path[0] + "' (" + (hinoki.pathToString(path)) + "):");
    this.message = lines.join('\n');
    this.type = 'InvalidResolution';
    this.path = path;
    this.resolution = resolution;
    if (Error.captureStackTrace) {
      return Error.captureStackTrace(this, this.constructor);
    }
  };
  hinoki.errors.InvalidResolution.prototype = new Error;
  hinoki.errors.CircularDependency = function(path, containers) {
    this.message = "circular dependency " + (hinoki.pathToString(path));
    this.type = 'CircularDependency';
    this.path = path;
    this.containers = containers;
    if (Error.captureStackTrace) {
      return Error.captureStackTrace(this, this.constructor);
    }
  };
  hinoki.errors.CircularDependency.prototype = new Error;
  hinoki.errors.ErrorInFactory = function(path, container, error) {
    this.message = "error in factory for '" + path[0] + "'. original error message: " + error.message;
    this.type = 'ErrorInFactory';
    this.path = path;
    this.container = container;
    this.error = error;
    if (Error.captureStackTrace) {
      return Error.captureStackTrace(this, this.constructor);
    }
  };
  hinoki.errors.ErrorInFactory.prototype = new Error;
  hinoki.errors.FactoryReturnedUndefined = function(path, container, factory) {
    this.message = "factory for '" + path[0] + "' returned undefined";
    this.type = 'FactoryReturnedUndefined';
    this.path = path;
    this.container = container;
    this.factory = factory;
    if (Error.captureStackTrace) {
      return Error.captureStackTrace(this, this.constructor);
    }
  };
  hinoki.errors.FactoryReturnedUndefined.prototype = new Error;
  hinoki.errors.PromiseRejected = function(path, container, error) {
    this.message = "promise returned from factory for '" + path[0] + "' was rejected. original error message: " + error.message;
    this.type = 'PromiseRejected';
    this.path = path;
    this.container = container;
    this.error = error;
    if (Error.captureStackTrace) {
      return Error.captureStackTrace(this, this.constructor);
    }
  };
  hinoki.errors.PromiseRejected.prototype = new Error;
  hinoki.pathToString = function(path) {
    return path.join(' <- ');
  };
  hinoki.isObject = function(x) {
    return x === Object(x);
  };
  hinoki.isThenable = function(x) {
    return hinoki.isObject(x) && 'function' === typeof x.then;
  };
  hinoki.isUndefined = function(x) {
    return 'undefined' === typeof x;
  };
  hinoki.isNull = function(x) {
    return null === x;
  };
  hinoki.isExisting = function(x) {
    return x != null;
  };
  hinoki.identity = function(x) {
    return x;
  };
  hinoki.some = function(array, iterator, predicate, sentinel) {
    var i, length, result;
    if (iterator == null) {
      iterator = hinoki.identity;
    }
    if (predicate == null) {
      predicate = hinoki.isExisting;
    }
    if (sentinel == null) {
      sentinel = void 0;
    }
    i = 0;
    length = array.length;
    while (i < length) {
      result = iterator(array[i], i);
      if (predicate(result, i)) {
        return result;
      }
      i++;
    }
    return sentinel;
  };
  hinoki.arrayOfStringsHasDuplicates = function(array) {
    var i, length, value, valuesSoFar;
    i = 0;
    length = array.length;
    valuesSoFar = {};
    while (i < length) {
      value = array[i];
      if (Object.prototype.hasOwnProperty.call(valuesSoFar, value)) {
        return true;
      }
      valuesSoFar[value] = true;
      i++;
    }
    return false;
  };
  hinoki.coerceToArray = function(arg) {
    if (Array.isArray(arg)) {
      return arg;
    }
    if (arg == null) {
      return [];
    }
    return [arg];
  };
  hinoki.startingWith = function(xs, x) {
    var index;
    index = xs.indexOf(x);
    if (index === -1) {
      return [];
    }
    return xs.slice(index);
  };
  hinoki.parseFunctionArguments = function(fun) {
    var argumentPart, dependencies, string;
    if ('function' !== typeof fun) {
      throw new Error('argument must be a function');
    }
    string = fun.toString();
    argumentPart = string.slice(string.indexOf('(') + 1, string.indexOf(')'));
    dependencies = argumentPart.match(/([^\s,]+)/g);
    if (dependencies) {
      return dependencies;
    } else {
      return [];
    }
  };
  return hinoki.getNamesToInject = function(factory) {
    if (factory.$inject != null) {
      return factory.$inject;
    } else {
      return hinoki.parseFunctionArguments(factory);
    }
  };
})();
