// Generated by CoffeeScript 1.7.1
(function() {
  var Promise, hinoki;
  hinoki = {};
  if (typeof window !== "undefined" && window !== null) {
    if (window.Promise == null) {
      throw new Error('hinoki requires Promise global by bluebird to be present');
    }
    Promise = window.Promise;
    window.hinoki = hinoki;
  } else if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
    Promise = require('bluebird');
    module.exports = hinoki;
  } else {
    throw new Error('either the `window` global or the `module.exports` global must be present');
  }
  hinoki.get = function(oneOrManyContainers, oneOrManyNamesOrPaths, debug) {
    var containers;
    containers = hinoki.coerceToArray(oneOrManyContainers);
    if (containers.length === 0) {
      throw new Error('at least 1 container is required');
    }
    if (Array.isArray(oneOrManyNamesOrPaths)) {
      return Promise.all(oneOrManyNamesOrPaths).map(function(nameOrPath) {
        return hinoki.getOne(containers, nameOrPath, debug);
      });
    } else {
      return hinoki.getOne(containers, oneOrManyNamesOrPaths, debug);
    }
  };
  hinoki.getOne = function(containers, nameOrPath, debug) {
    var dependenciesPromise, dependencyNames, dependencyPaths, error, factoryCallResultPromise, nocache, path, remainingContainers, result, underConstruction, _base, _ref;
    path = hinoki.coerceToArray(nameOrPath);
    result = hinoki.resolveInContainers(containers, path, debug);
    if (result == null) {
      error = new hinoki.UnresolvableFactoryError(path, containers[0]);
      return Promise.reject(error);
    }
    if (result instanceof Error) {
      return Promise.reject(result);
    }
    if (!hinoki.isUndefined(result.value)) {
      if (typeof debug === "function") {
        debug({
          event: 'valueFound',
          name: path[0],
          path: path,
          result: result
        });
      }
      return Promise.resolve(result.value);
    }
    if (hinoki.arrayOfStringsHasDuplicates(path)) {
      error = new hinoki.CircularDependencyError(path, result.container);
      return Promise.reject(error);
    }
    if ('function' !== typeof result.factory) {
      return Promise.reject(new hinoki.FactoryNotFunctionError(path, result.container, result.factory));
    }
    if (typeof debug === "function") {
      debug({
        event: 'factoryResolved',
        name: path[0],
        path: path,
        result: result
      });
    }
    underConstruction = (_ref = result.container.underConstruction) != null ? _ref[result.path[0]] : void 0;
    if (underConstruction != null) {
      if (typeof debug === "function") {
        debug({
          event: 'valueUnderConstruction',
          name: path[0],
          path: path,
          value: underConstruction,
          container: result.container
        });
      }
      return underConstruction;
    }
    remainingContainers = hinoki.startingWith(containers, result.container);
    if (remainingContainers.length === 0) {
      remainingContainers = [result.container];
    }
    dependencyNames = hinoki.getNamesToInject(result.factory);
    dependencyPaths = dependencyNames.map(function(x) {
      return hinoki.coerceToArray(x).concat(path);
    });
    dependenciesPromise = hinoki.get(remainingContainers, dependencyPaths, debug);
    factoryCallResultPromise = dependenciesPromise.then(function(dependencyValues) {
      return hinoki.callFactory(result.container, path, result.factory, dependencyValues, debug);
    });
    nocache = result.nocache || result.factory.$nocache;
    if (!nocache) {
      if ((_base = result.container).underConstruction == null) {
        _base.underConstruction = {};
      }
      result.container.underConstruction[result.path[0]] = factoryCallResultPromise;
    }
    return factoryCallResultPromise.then(function(value) {
      var cache;
      if (hinoki.isUndefined(value)) {
        error = new hinoki.FactoryReturnedUndefinedError(path, result.container, result.factory);
        return Promise.reject(error);
      }
      if (!nocache) {
        cache = result.container.cache || hinoki.defaultCache;
        cache({
          container: result.container,
          path: result.path,
          value: value
        });
        delete result.container.underConstruction[result.path[0]];
      }
      return value;
    });
  };
  hinoki.callFactory = function(container, nameOrPath, factory, dependencyValues, debug) {
    var error, exception, path, valueOrPromise;
    path = hinoki.coerceToArray(nameOrPath);
    try {
      valueOrPromise = factory.apply(null, dependencyValues);
    } catch (_error) {
      exception = _error;
      error = new hinoki.ExceptionInFactoryError(path, container, exception);
      return Promise.reject(error);
    }
    if (!hinoki.isThenable(valueOrPromise)) {
      if (typeof debug === "function") {
        debug({
          event: 'valueCreated',
          name: path[0],
          path: path,
          value: valueOrPromise,
          factory: factory,
          container: container
        });
      }
      return Promise.resolve(valueOrPromise);
    }
    if (typeof debug === "function") {
      debug({
        event: 'promiseCreated',
        name: path[0],
        path: path,
        promise: valueOrPromise,
        container: container,
        factory: factory
      });
    }
    return Promise.resolve(valueOrPromise).then(function(value) {
      if (typeof debug === "function") {
        debug({
          event: 'promiseResolved',
          name: path[0],
          path: path,
          value: value,
          container: container,
          factory: factory
        });
      }
      return value;
    })["catch"](function(rejection) {
      error = new hinoki.PromiseRejectedError(path, container, rejection);
      return Promise.reject(error);
    });
  };
  hinoki.resolveInContainer = function(container, nameOrPath, debug) {
    var accum, defaultResolver, name, path, resolve, resolvers;
    path = hinoki.coerceToArray(nameOrPath);
    name = path[0];
    defaultResolver = function(query) {
      var result;
      result = hinoki.defaultResolver(query);
      if (typeof debug === "function") {
        debug({
          event: 'defaultResolverCalled',
          query: query,
          result: result
        });
      }
      return result;
    };
    resolvers = container.resolvers || [];
    accum = function(inner, resolver) {
      return function(query) {
        var result;
        result = resolver(query, inner, debug);
        if (typeof debug === "function") {
          debug({
            event: 'resolverCalled',
            query: query,
            result: result
          });
        }
        return result;
      };
    };
    resolve = resolvers.reduceRight(accum, defaultResolver);
    return resolve({
      container: container,
      path: path
    });
  };
  hinoki.resolveInContainers = function(containers, nameOrPath, debug) {
    var path;
    path = hinoki.coerceToArray(nameOrPath);
    return hinoki.some(containers, function(container) {
      return hinoki.resolveInContainer(container, path, debug);
    });
  };
  hinoki.defaultResolver = function(query) {
    var factory, name, value, _ref, _ref1;
    name = query.path[0];
    value = (_ref = query.container.values) != null ? _ref[name] : void 0;
    if (!hinoki.isUndefined(value)) {
      return {
        value: value,
        path: query.path,
        container: query.container
      };
    }
    factory = (_ref1 = query.container.factories) != null ? _ref1[name] : void 0;
    if (factory == null) {
      return;
    }
    if ((factory.$inject == null) && 'function' === typeof factory) {
      factory.$inject = hinoki.parseFunctionArguments(factory);
    }
    return {
      factory: factory,
      path: query.path,
      container: query.container
    };
  };
  hinoki.defaultCache = function(options) {
    var _base;
    if ((_base = options.container).values == null) {
      _base.values = {};
    }
    return options.container.values[options.path[0]] = options.value;
  };
  hinoki.CircularDependencyError = function(path, container) {
    this.message = "circular dependency " + (hinoki.pathToString(path));
    this.type = 'CircularDependencyError';
    this.name = path[0];
    this.path = path;
    this.container = container;
    if (Error.captureStackTrace) {
      return Error.captureStackTrace(this, this.constructor);
    }
  };
  hinoki.CircularDependencyError.prototype = new Error;
  hinoki.UnresolvableFactoryError = function(path, container) {
    this.message = "unresolvable factory '" + path[0] + "' (" + (hinoki.pathToString(path)) + ")";
    this.type = 'UnresolvableFactoryError';
    this.name = path[0];
    this.path = path;
    this.container = container;
    if (Error.captureStackTrace) {
      return Error.captureStackTrace(this, this.constructor);
    }
  };
  hinoki.UnresolvableFactoryError.prototype = new Error;
  hinoki.ExceptionInFactoryError = function(path, container, exception) {
    this.message = "exception in factory '" + path[0] + "': " + exception;
    this.type = 'ExceptionInFactoryError';
    this.name = path[0];
    this.path = path;
    this.container = container;
    this.exception = exception;
    if (Error.captureStackTrace) {
      return Error.captureStackTrace(this, this.constructor);
    }
  };
  hinoki.ExceptionInFactoryError.prototype = new Error;
  hinoki.PromiseRejectedError = function(path, container, rejection) {
    this.message = "promise returned from factory '" + path[0] + "' was rejected with reason: " + rejection;
    this.type = 'PromiseRejectedError';
    this.name = path[0];
    this.path = path;
    this.container = container;
    this.rejection = rejection;
    if (Error.captureStackTrace) {
      return Error.captureStackTrace(this, this.constructor);
    }
  };
  hinoki.PromiseRejectedError.prototype = new Error;
  hinoki.FactoryNotFunctionError = function(path, container, factory) {
    this.message = "factory '" + path[0] + "' is not a function: " + factory;
    this.type = 'FactoryNotFunctionError';
    this.name = path[0];
    this.path = path;
    this.container = container;
    this.factory = factory;
    if (Error.captureStackTrace) {
      return Error.captureStackTrace(this, this.constructor);
    }
  };
  hinoki.FactoryNotFunctionError.prototype = new Error;
  hinoki.FactoryReturnedUndefinedError = function(path, container, factory) {
    this.message = "factory '" + path[0] + "' returned undefined";
    this.type = 'FactoryReturnedUndefinedError';
    this.name = path[0];
    this.path = path;
    this.container = container;
    this.factory = factory;
    if (Error.captureStackTrace) {
      return Error.captureStackTrace(this, this.constructor);
    }
  };
  hinoki.FactoryReturnedUndefinedError.prototype = new Error;
  hinoki.pathToString = function(path) {
    return path.join(' <- ');
  };
  hinoki.isObject = function(x) {
    return x === Object(x);
  };
  hinoki.isThenable = function(x) {
    return hinoki.isObject(x) && 'function' === typeof x.then;
  };
  hinoki.isUndefined = function(x) {
    return 'undefined' === typeof x;
  };
  hinoki.isNull = function(x) {
    return null === x;
  };
  hinoki.isExisting = function(x) {
    return x != null;
  };
  hinoki.identity = function(x) {
    return x;
  };
  hinoki.some = function(array, iterator, predicate, sentinel) {
    var i, length, result;
    if (iterator == null) {
      iterator = hinoki.identity;
    }
    if (predicate == null) {
      predicate = hinoki.isExisting;
    }
    if (sentinel == null) {
      sentinel = void 0;
    }
    i = 0;
    length = array.length;
    while (i < length) {
      result = iterator(array[i], i);
      if (predicate(result, i)) {
        return result;
      }
      i++;
    }
    return sentinel;
  };
  hinoki.arrayOfStringsHasDuplicates = function(array) {
    var i, length, value, valuesSoFar;
    i = 0;
    length = array.length;
    valuesSoFar = {};
    while (i < length) {
      value = array[i];
      if (Object.prototype.hasOwnProperty.call(valuesSoFar, value)) {
        return true;
      }
      valuesSoFar[value] = true;
      i++;
    }
    return false;
  };
  hinoki.coerceToArray = function(arg) {
    if (Array.isArray(arg)) {
      return arg;
    }
    if (arg == null) {
      return [];
    }
    return [arg];
  };
  hinoki.startingWith = function(xs, x) {
    var index;
    index = xs.indexOf(x);
    if (index === -1) {
      return [];
    }
    return xs.slice(index);
  };
  hinoki.parseFunctionArguments = function(fun) {
    var argumentPart, dependencies, string;
    if ('function' !== typeof fun) {
      throw new Error('argument must be a function');
    }
    string = fun.toString();
    argumentPart = string.slice(string.indexOf('(') + 1, string.indexOf(')'));
    dependencies = argumentPart.match(/([^\s,]+)/g);
    if (dependencies) {
      return dependencies;
    } else {
      return [];
    }
  };
  return hinoki.getNamesToInject = function(factory) {
    if (factory.$inject != null) {
      return factory.$inject;
    } else {
      return hinoki.parseFunctionArguments(factory);
    }
  };
})();
