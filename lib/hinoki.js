// Generated by CoffeeScript 1.9.1
(function(root, factory) {
  if (('function' === typeof define) && (define.amd != null)) {
    return define(['bluebird'], factory);
  } else if (typeof exports !== "undefined" && exports !== null) {
    return module.exports = factory(require('bluebird'));
  } else {
    return root.hinoki = factory(root.Promise);
  }
})(this, function(Promise) {
  var hinoki;
  hinoki = function(oneOrManyLifetimes, nameOrNamesOrFunction) {
    var lifetimes, paths;
    lifetimes = hinoki.coerceToArray(oneOrManyLifetimes);
    if (lifetimes.length === 0) {
      throw new Error('at least 1 lifetime is required');
    }
    if ('function' === typeof nameOrNamesOrFunction) {
      return hinoki.many(lifetimes, 0, hinoki.getNamesToInject(nameOrNamesOrFunction).map(hinoki.coerceToArray)).spread(nameOrNamesOrFunction);
    }
    if (Array.isArray(nameOrNamesOrFunction)) {
      paths = hinoki.coerceToArray(nameOrNamesOrFunction).map(hinoki.coerceToArray);
      return hinoki.many(lifetimes, 0, paths);
    }
    return hinoki.one(lifetimes, 0, hinoki.coerceToArray(nameOrNamesOrFunction));
  };
  hinoki.many = function(lifetimes, lifetimeOffset, paths) {
    return Promise.all(paths.map(function(path) {
      return hinoki.one(lifetimes, lifetimeOffset, path);
    }));
  };
  hinoki.one = function(lifetimes, lifetimeOffset, path) {
    var dependenciesPromise, dependencyNames, dependencyPaths, factory, factoryCallResultPromise, factorySource, factorySourceIndex, factorySourceLength, lifetime, lifetimeLength, name, newLifetimeOffset, newPath, promise, ref, ref1, value;
    name = path[0];
    lifetime = void 0;
    factorySource = void 0;
    factory = void 0;
    newLifetimeOffset = lifetimeOffset - 1;
    lifetimeLength = lifetimes.length;
    while (++newLifetimeOffset < lifetimeLength) {
      lifetime = lifetimes[newLifetimeOffset];
      value = (ref = lifetime.values) != null ? ref[name] : void 0;
      if (!hinoki.isUndefined(value)) {
        if (typeof lifetime.debug === "function") {
          lifetime.debug({
            event: 'valueWasResolved',
            path: path,
            value: value
          });
        }
        return Promise.resolve(value);
      }
      promise = (ref1 = lifetime.promisesAwaitingResolution) != null ? ref1[name] : void 0;
      if (promise != null) {
        if (typeof lifetime.debug === "function") {
          lifetime.debug({
            event: 'valueIsAlreadyAwaitingResolution',
            path: path,
            promise: promise
          });
        }
        return promise;
      }
      if (Array.isArray(lifetime.factories)) {
        factorySourceIndex = -1;
        factorySourceLength = lifetime.factories.length;
        while (++factorySourceIndex < factorySourceLength) {
          factorySource = lifetime.factories[factorySourceIndex];
          if ('function' === typeof factorySource) {
            factory = factorySource(name);
          } else {
            factory = factorySource[name];
          }
          if (factory != null) {
            break;
          }
        }
        if (factory != null) {
          break;
        }
      }
      factorySource = lifetime.factories;
      factory = factorySource != null ? factorySource[name] : void 0;
      if (factory != null) {
        break;
      }
    }
    if (factory == null) {
      return Promise.reject(new hinoki.UnresolvableError(path, lifetimes));
    }
    if (hinoki.arrayOfStringsHasDuplicates(path)) {
      return Promise.reject(new hinoki.CircularDependencyError(path, lifetime, factory));
    }
    if (typeof lifetime.debug === "function") {
      lifetime.debug({
        event: 'factoryWasResolved',
        path: path,
        factorySource: factorySource,
        factory: factory
      });
    }
    dependencyNames = hinoki.getAndCacheNamesToInject(factory);
    newPath = path.slice();
    newPath[0] = name;
    dependencyPaths = dependencyNames.map(function(x) {
      return hinoki.coerceToArray(x).concat(newPath);
    });
    dependenciesPromise = dependencyPaths.length !== 0 ? hinoki.many(lifetimes, newLifetimeOffset, dependencyPaths) : Promise.resolve([]);
    factoryCallResultPromise = dependenciesPromise.then(function(dependencyValues) {
      return hinoki.callFactory(lifetime, newPath, factory, dependencyValues);
    });
    if (!factory.$nocache) {
      if (lifetime.promisesAwaitingResolution == null) {
        lifetime.promisesAwaitingResolution = {};
      }
      lifetime.promisesAwaitingResolution[name] = factoryCallResultPromise;
    }
    return factoryCallResultPromise.then(function(value) {
      if (hinoki.isUndefined(value)) {
        return Promise.reject(new hinoki.FactoryReturnedUndefinedError(newPath, lifetime, factory));
      }
      if (!factory.$nocache) {
        if (lifetime.values == null) {
          lifetime.values = {};
        }
        lifetime.values[name] = value;
      }
      return value;
    })["finally"](function() {
      if (!factory.$nocache) {
        delete lifetime.promisesAwaitingResolution[name];
        if (Object.keys(lifetime.promisesAwaitingResolution).length === 0) {
          return delete lifetime.promisesAwaitingResolution;
        }
      }
    });
  };
  hinoki.callFactory = function(lifetime, path, factory, dependencyValues) {
    var error, valueOrPromise;
    try {
      valueOrPromise = factory.apply(null, dependencyValues);
    } catch (_error) {
      error = _error;
      return Promise.reject(new hinoki.ThrowInFactoryError(path, lifetime, factory, error));
    }
    if (!hinoki.isThenable(valueOrPromise)) {
      if (typeof lifetime.debug === "function") {
        lifetime.debug({
          event: 'valueWasCreated',
          path: path,
          value: valueOrPromise,
          factory: factory
        });
      }
      return Promise.resolve(valueOrPromise);
    }
    if (typeof lifetime.debug === "function") {
      lifetime.debug({
        event: 'promiseWasCreated',
        path: path,
        promise: valueOrPromise,
        factory: factory
      });
    }
    return Promise.resolve(valueOrPromise).then(function(value) {
      if (typeof lifetime.debug === "function") {
        lifetime.debug({
          event: 'promiseWasResolved',
          path: path,
          value: value,
          factory: factory
        });
      }
      return value;
    })["catch"](function(rejection) {
      return Promise.reject(new hinoki.PromiseRejectedError(path, lifetime, rejection));
    });
  };
  hinoki.inherits = function(constructor, superConstructor) {
    var proxyConstructor;
    if ('function' === typeof Object.create) {
      constructor.prototype = Object.create(superConstructor.prototype);
      return constructor.prototype.constructor = constructor;
    } else {
      proxyConstructor = function() {};
      proxyConstructor.prototype = superConstructor.prototype;
      constructor.prototype = new proxyConstructor;
      return constructor.prototype.constructor = constructor;
    }
  };
  hinoki.BaseError = function() {};
  hinoki.inherits(hinoki.BaseError, Error);
  hinoki.UnresolvableError = function(path, lifetime) {
    this.name = 'UnresolvableError';
    this.message = "unresolvable name '" + path[0] + "' (" + (hinoki.pathToString(path)) + ")";
    if (Error.captureStackTrace != null) {
      Error.captureStackTrace(this, this.constructor);
    }
    this.path = path;
    this.lifetime = lifetime;
  };
  hinoki.inherits(hinoki.UnresolvableError, hinoki.BaseError);
  hinoki.CircularDependencyError = function(path, lifetime, factory) {
    this.name = 'CircularDependencyError';
    this.message = "circular dependency " + (hinoki.pathToString(path));
    if (Error.captureStackTrace != null) {
      Error.captureStackTrace(this, this.constructor);
    }
    this.path = path;
    this.lifetime = lifetime;
    this.factory = factory;
  };
  hinoki.inherits(hinoki.CircularDependencyError, hinoki.BaseError);
  hinoki.ThrowInFactoryError = function(path, lifetime, factory, error) {
    this.name = 'ThrowInFactoryError';
    this.message = "error in factory for '" + path[0] + "'. original error: " + (error.toString());
    if (Error.captureStackTrace != null) {
      Error.captureStackTrace(this, this.constructor);
    }
    this.path = path;
    this.lifetime = lifetime;
    this.factory = factory;
    this.error = error;
  };
  hinoki.inherits(hinoki.ThrowInFactoryError, hinoki.BaseError);
  hinoki.FactoryReturnedUndefinedError = function(path, lifetime, factory) {
    this.name = 'FactoryReturnedUndefinedError';
    this.message = "factory for '" + path[0] + "' returned undefined";
    if (Error.captureStackTrace != null) {
      Error.captureStackTrace(this, this.constructor);
    }
    this.path = path;
    this.lifetime = lifetime;
    this.factory = factory;
  };
  hinoki.inherits(hinoki.FactoryReturnedUndefinedError, hinoki.BaseError);
  hinoki.PromiseRejectedError = function(path, lifetime, error) {
    this.name = 'PromiseRejectedError';
    this.message = "promise returned from factory for '" + path[0] + "' was rejected. original error: " + (error.toString());
    if (Error.captureStackTrace != null) {
      Error.captureStackTrace(this, this.constructor);
    }
    this.path = path;
    this.lifetime = lifetime;
    this.error = error;
  };
  hinoki.inherits(hinoki.PromiseRejectedError, hinoki.BaseError);
  hinoki.pathToString = function(path) {
    return path.join(' <- ');
  };
  hinoki.isObject = function(x) {
    return x === Object(x);
  };
  hinoki.isThenable = function(x) {
    return hinoki.isObject(x) && 'function' === typeof x.then;
  };
  hinoki.isUndefined = function(x) {
    return 'undefined' === typeof x;
  };
  hinoki.isNull = function(x) {
    return null === x;
  };
  hinoki.isExisting = function(x) {
    return x != null;
  };
  hinoki.identity = function(x) {
    return x;
  };
  hinoki.some = function(array, iterator, predicate, sentinel) {
    var i, length, result;
    if (iterator == null) {
      iterator = hinoki.identity;
    }
    if (predicate == null) {
      predicate = hinoki.isExisting;
    }
    if (sentinel == null) {
      sentinel = void 0;
    }
    i = 0;
    length = array.length;
    while (i < length) {
      result = iterator(array[i], i);
      if (predicate(result, i)) {
        return result;
      }
      i++;
    }
    return sentinel;
  };
  hinoki.arrayOfStringsHasDuplicates = function(array) {
    var i, length, value, valuesSoFar;
    i = 0;
    length = array.length;
    valuesSoFar = {};
    while (i < length) {
      value = array[i];
      if (Object.prototype.hasOwnProperty.call(valuesSoFar, value)) {
        return true;
      }
      valuesSoFar[value] = true;
      i++;
    }
    return false;
  };
  hinoki.coerceToArray = function(arg) {
    if (Array.isArray(arg)) {
      return arg;
    }
    if (arg == null) {
      return [];
    }
    return [arg];
  };
  hinoki.startingWith = function(xs, x) {
    var index;
    index = xs.indexOf(x);
    if (index === -1) {
      return [];
    }
    return xs.slice(index);
  };
  hinoki.parseFunctionArguments = function(fun) {
    var argumentPart, dependencies, string;
    if ('function' !== typeof fun) {
      throw new Error('argument must be a function');
    }
    string = fun.toString();
    argumentPart = string.slice(string.indexOf('(') + 1, string.indexOf(')'));
    dependencies = argumentPart.match(/([^\s,]+)/g);
    if (dependencies) {
      return dependencies;
    } else {
      return [];
    }
  };
  hinoki.getNamesToInject = function(factory) {
    if (factory.$inject != null) {
      return factory.$inject;
    } else {
      return hinoki.parseFunctionArguments(factory);
    }
  };
  hinoki.getAndCacheNamesToInject = function(factory) {
    var names;
    if (factory.$inject != null) {
      return factory.$inject;
    } else {
      names = hinoki.parseFunctionArguments(factory);
      factory.$inject = names;
      return names;
    }
  };
  return hinoki;
});
