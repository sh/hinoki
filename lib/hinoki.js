// Generated by CoffeeScript 1.9.2
(function(root, factory) {
  if (('function' === typeof define) && (define.amd != null)) {
    return define(['bluebird', 'lodash'], factory);
  } else if (typeof exports !== "undefined" && exports !== null) {
    return module.exports = factory(require('bluebird'), require('lodash'), require('fs'), require('path'));
  } else {
    return root.hinoki = factory(root.Promise, root.lodash);
  }
})(this, function(Promise, _, fs, path) {
  var hinoki;
  hinoki = function(arg1, arg2, arg3) {
    var cacheTarget, lifetimes, nameOrNamesOrFunction, names, paths, source;
    source = hinoki.source(arg1);
    if (arg3 != null) {
      lifetimes = hinoki.coerceToArray(arg2);
      nameOrNamesOrFunction = arg3;
    } else {
      lifetimes = [{}];
      nameOrNamesOrFunction = arg2;
    }
    cacheTarget = 0;
    if ('function' === typeof nameOrNamesOrFunction) {
      names = hinoki.getNamesToInject(nameOrNamesOrFunction);
      paths = names.map(hinoki.coerceToArray);
      return hinoki.getValuesAndCacheTarget(source, lifetimes, paths, cacheTarget).promise.spread(nameOrNamesOrFunction);
    }
    if (Array.isArray(nameOrNamesOrFunction)) {
      names = hinoki.coerceToArray(nameOrNamesOrFunction);
      paths = names.map(hinoki.coerceToArray);
      return hinoki.getValuesAndCacheTarget(source, lifetimes, paths, cacheTarget).promise;
    }
    path = hinoki.coerceToArray(nameOrNamesOrFunction);
    return hinoki.getValueAndCacheTarget(source, lifetimes, path, cacheTarget).promise;
  };
  hinoki.PromiseAndCacheTarget = function(promise, cacheTarget) {
    this.promise = promise;
    this.cacheTarget = cacheTarget;
    return this;
  };
  hinoki.getValuesAndCacheTarget = function(source, lifetimes, paths, cacheTarget) {
    var nextCacheTarget, promise;
    nextCacheTarget = cacheTarget;
    promise = Promise.all(_.map(paths, function(path) {
      var result;
      result = hinoki.getValueAndCacheTarget(source, lifetimes, path, cacheTarget);
      nextCacheTarget = Math.max(nextCacheTarget, result.cacheTarget);
      return result.promise;
    }));
    return new hinoki.PromiseAndCacheTarget(promise, nextCacheTarget);
  };
  hinoki.getValueAndCacheTarget = function(source, lifetimes, path, cacheTarget) {
    var dependenciesPromise, dependencyNames, dependencyPaths, factory, factoryCallResultPromise, name, newPath, nextCacheTarget, promise, result, returnPromise, valueIndex, valueOrPromise;
    name = path[0];
    valueIndex = hinoki.getIndexOfFirstObjectHavingProperty(lifetimes, name);
    if (valueIndex != null) {
      valueOrPromise = lifetimes[valueIndex][name];
      promise = hinoki.isThenable(valueOrPromise) ? valueOrPromise : Promise.resolve(valueOrPromise);
      return new hinoki.PromiseAndCacheTarget(promise, valueIndex);
    }
    factory = source(name);
    if (factory == null) {
      return new hinoki.PromiseAndCacheTarget(Promise.reject(new hinoki.UnresolvableError(path)), cacheTarget);
    }
    if (hinoki.arrayOfStringsHasDuplicates(path)) {
      return new hinoki.PromiseAndCacheTarget(Promise.reject(new hinoki.CircularDependencyError(path, {}, factory)), cacheTarget);
    }
    dependencyNames = hinoki.baseGetNamesToInject(factory, true);
    newPath = path.slice();
    dependencyPaths = dependencyNames.map(function(x) {
      return hinoki.coerceToArray(x).concat(newPath);
    });
    if (dependencyPaths.length !== 0) {
      result = hinoki.getValuesAndCacheTarget(source, lifetimes, dependencyPaths, cacheTarget);
      dependenciesPromise = result.promise;
      nextCacheTarget = result.cacheTarget;
    } else {
      dependenciesPromise = Promise.resolve([]);
      nextCacheTarget = cacheTarget;
    }
    factoryCallResultPromise = dependenciesPromise.then(function(dependencyValues) {
      return hinoki.callFactoryAndNormalizeResult(lifetimes, newPath, factory, dependencyValues, nextCacheTarget);
    });
    if (!factory.__nocache) {
      lifetimes[nextCacheTarget][name] = factoryCallResultPromise;
    }
    returnPromise = factoryCallResultPromise.then(function(value) {
      if (hinoki.isUndefined(value)) {
        return Promise.reject(new hinoki.FactoryReturnedUndefinedError(newPath, {}, factory));
      }
      if (!factory.__nocache) {
        lifetimes[nextCacheTarget][name] = value;
      }
      return value;
    })["catch"](function(error) {
      if (!factory.__nocache) {
        delete lifetimes[nextCacheTarget][name];
      }
      return Promise.reject(error);
    });
    return new hinoki.PromiseAndCacheTarget(returnPromise, nextCacheTarget);
  };
  hinoki.callFactoryFunction = function(factoryFunction, valuesOfDependencies) {
    var error, valueOrPromise;
    try {
      return valueOrPromise = factoryFunction.apply(null, valuesOfDependencies);
    } catch (_error) {
      error = _error;
      return Promise.reject(new hinoki.ThrowInFactoryError(path, {}, factoryFunction, error));
    }
  };
  hinoki.callFactoryObjectArray = function(factoryObject, dependenciesObject) {
    var iterator;
    iterator = function(f) {
      var dependencies, names;
      if ('function' === typeof f) {
        names = hinoki.getNamesToInject(f);
        dependencies = _.map(names, function(name) {
          return dependenciesObject[name];
        });
        return hinoki.callFactoryFunction(f, dependencies);
      } else {
        return hinoki.callFactoryObjectArray(f, dependenciesObject);
      }
    };
    if (Array.isArray(factory)) {
      return Promise.all(factory).map(iterator);
    } else {
      return Promise.props(_.mapValues(factory, iterator));
    }
  };
  hinoki.callFactoryAndNormalizeResult = function(lifetime, path, factory, dependencyValues) {
    var dependenciesObject, names, valueOrPromise;
    if ('function' === typeof factory) {
      valueOrPromise = hinoki.callFactoryFunction(factory, dependencyValues);
    } else {
      names = hinoki.getNamesToInject(factory);
      dependenciesObject = _.zipObject(names, dependencyValues);
      valueOrPromise = hinoki.callFactoryObjectArray(factory, dependenciesObject);
    }
    if (!hinoki.isThenable(valueOrPromise)) {
      return Promise.resolve(valueOrPromise);
    }
    return Promise.resolve(valueOrPromise).then(function(value) {
      return value;
    })["catch"](function(rejection) {
      return Promise.reject(new hinoki.PromiseRejectedError(path, lifetime, rejection));
    });
  };
  hinoki.inherits = function(constructor, superConstructor) {
    var proxyConstructor;
    if ('function' === typeof Object.create) {
      constructor.prototype = Object.create(superConstructor.prototype);
      return constructor.prototype.constructor = constructor;
    } else {
      proxyConstructor = function() {};
      proxyConstructor.prototype = superConstructor.prototype;
      constructor.prototype = new proxyConstructor;
      return constructor.prototype.constructor = constructor;
    }
  };
  hinoki.BaseError = function() {};
  hinoki.inherits(hinoki.BaseError, Error);
  hinoki.UnresolvableError = function(path, lifetime) {
    this.name = 'UnresolvableError';
    this.message = "unresolvable name '" + path[0] + "' (" + (hinoki.pathToString(path)) + ")";
    if (Error.captureStackTrace != null) {
      Error.captureStackTrace(this, this.constructor);
    }
    this.path = path;
    this.lifetime = lifetime;
  };
  hinoki.inherits(hinoki.UnresolvableError, hinoki.BaseError);
  hinoki.CircularDependencyError = function(path, lifetime, factory) {
    this.name = 'CircularDependencyError';
    this.message = "circular dependency " + (hinoki.pathToString(path));
    if (Error.captureStackTrace != null) {
      Error.captureStackTrace(this, this.constructor);
    }
    this.path = path;
    this.lifetime = lifetime;
    this.factory = factory;
  };
  hinoki.inherits(hinoki.CircularDependencyError, hinoki.BaseError);
  hinoki.ThrowInFactoryError = function(path, lifetime, factory, error) {
    this.name = 'ThrowInFactoryError';
    this.message = "error in factory for '" + path[0] + "'. original error: " + (error.toString());
    if (Error.captureStackTrace != null) {
      Error.captureStackTrace(this, this.constructor);
    }
    this.path = path;
    this.lifetime = lifetime;
    this.factory = factory;
    this.error = error;
  };
  hinoki.inherits(hinoki.ThrowInFactoryError, hinoki.BaseError);
  hinoki.FactoryReturnedUndefinedError = function(path, lifetime, factory) {
    this.name = 'FactoryReturnedUndefinedError';
    this.message = "factory for '" + path[0] + "' returned undefined";
    if (Error.captureStackTrace != null) {
      Error.captureStackTrace(this, this.constructor);
    }
    this.path = path;
    this.lifetime = lifetime;
    this.factory = factory;
  };
  hinoki.inherits(hinoki.FactoryReturnedUndefinedError, hinoki.BaseError);
  hinoki.PromiseRejectedError = function(path, lifetime, error) {
    this.name = 'PromiseRejectedError';
    this.message = "promise returned from factory for '" + path[0] + "' was rejected. original error: " + (error.toString());
    if (Error.captureStackTrace != null) {
      Error.captureStackTrace(this, this.constructor);
    }
    this.path = path;
    this.lifetime = lifetime;
    this.error = error;
  };
  hinoki.inherits(hinoki.PromiseRejectedError, hinoki.BaseError);
  hinoki.pathToString = function(path) {
    return path.join(' <- ');
  };
  hinoki.isObject = function(x) {
    return x === Object(x);
  };
  hinoki.isThenable = function(x) {
    return hinoki.isObject(x) && 'function' === typeof x.then;
  };
  hinoki.isUndefined = function(x) {
    return 'undefined' === typeof x;
  };
  hinoki.isNull = function(x) {
    return null === x;
  };
  hinoki.isExisting = function(x) {
    return x != null;
  };
  hinoki.identity = function(x) {
    return x;
  };
  hinoki.arrayOfStringsHasDuplicates = function(array) {
    var i, length, value, valuesSoFar;
    i = 0;
    length = array.length;
    valuesSoFar = {};
    while (i < length) {
      value = array[i];
      if (Object.prototype.hasOwnProperty.call(valuesSoFar, value)) {
        return true;
      }
      valuesSoFar[value] = true;
      i++;
    }
    return false;
  };
  hinoki.coerceToArray = function(arg) {
    if (Array.isArray(arg)) {
      return arg;
    }
    if (arg == null) {
      return [];
    }
    return [arg];
  };
  hinoki.parseFunctionArguments = function(fun) {
    var argumentPart, dependencies, string;
    if ('function' !== typeof fun) {
      throw new Error('argument must be a function');
    }
    string = fun.toString();
    argumentPart = string.slice(string.indexOf('(') + 1, string.indexOf(')'));
    dependencies = argumentPart.match(/([^\s,]+)/g);
    if (dependencies) {
      return dependencies;
    } else {
      return [];
    }
  };
  hinoki.getNamesToInject = function(factory) {
    return hinoki.baseGetNamesToInject(factory, false);
  };
  hinoki.baseGetNamesToInject = function(factory, cache) {
    var names, namesSet;
    if (factory.__inject != null) {
      return factory.__inject;
    } else if ('function' === typeof factory) {
      names = hinoki.parseFunctionArguments(factory);
      if (cache) {
        factory.__inject = names;
      }
      return names;
    } else if (Array.isArray(factory || 'object' === typeof factory)) {
      namesSet = {};
      _.forEach(factory, function(subFactory) {
        var subNames;
        subNames = hinoki.baseGetNamesToInject(subFactory, cache);
        return _.forEach(subNames, function(subName) {
          return namesSet[subName] = true;
        });
      });
      names = Object.keys(namesSet);
      if (cache) {
        factory.__inject = names;
      }
      return names;
    } else {
      throw new Error('factory has to be a function, object of factories or array of factories');
    }
  };
  hinoki.getIndexOfFirstObjectHavingProperty = function(objects, property) {
    var index, length;
    index = -1;
    length = objects.length;
    while (++index < length) {
      if (!hinoki.isUndefined(objects[index][property])) {
        return index;
      }
    }
    return null;
  };
  if ((fs != null) && (path != null)) {
    hinoki.requireSource = function(filepath) {
      if ('string' !== typeof filepath) {
        throw new Error('argument must be a string');
      }
      return hinoki.baseRequireSource(filepath, {});
    };
    hinoki.baseRequireSource = function(filepath, object) {
      var extension, filenames, stat;
      stat = fs.statSync(filepath);
      if (stat.isFile()) {
        extension = path.extname(filepath);
        if (extension !== '.js' && extension !== '.coffee') {
          return;
        }
        if (extension === '.coffee') {
          require('coffee-script/register');
        }
        extension = require(filepath);
        Object.keys(extension).map(function(key) {
          if ('function' !== typeof extension[key]) {
            throw new Error('export is not a function: ' + key + ' in :' + filepath);
          }
          if (object[key] != null) {
            throw new Error('duplicate export: ' + key + ' in: ' + filepath + '. first was in: ' + object[key].$file);
          }
          object[key] = extension[key];
          return object[key].$file = filepath;
        });
      } else if (stat.isDirectory()) {
        filenames = fs.readdirSync(filepath);
        filenames.forEach(function(filename) {
          return hinoki.baseRequireSource(path.join(filepath, filename), object);
        });
      }
      return object;
    };
  }
  hinoki.source = function(arg) {
    var coercedSources;
    if ('function' === typeof arg) {
      return arg;
    } else if (Array.isArray(arg)) {
      coercedSources = arg.map(hinoki.source);
      return function(name) {
        var index, length, result;
        index = -1;
        length = arg.length;
        while (++index < length) {
          result = coercedSources[index](name);
          if (result != null) {
            return result;
          }
        }
        return null;
      };
    } else if ('string' === typeof arg) {
      return hinoki.source(hinoki.requireSource(arg));
    } else if ('object' === typeof arg) {
      return function(name) {
        return arg[name];
      };
    } else {
      throw new Error('argument must be a function, string, object or array of these');
    }
  };
  return hinoki;
});
